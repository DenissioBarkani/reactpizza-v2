import { useContext, useEffect, useRef, useState } from 'react';
import Categories from '../components/Categories';
import Sort, { sortList } from '../components/Sort';
import Skeleton from '../components/PizzaBlock/skeleton';
import PizzaBlock from '../components/PizzaBlock';
import Pagination from '../components/Pagination';
import { SearchContext } from '../App';
import { useDispatch, useSelector } from 'react-redux';
import axios from 'axios';
import { selectFilter, setCategoryId, setCurrentPage, setFilters } from '../redux/slices/filterslice';
import qs from 'qs';
import { useNavigate } from 'react-router-dom';
import { fetchPizzas, selectPizzaData } from '../redux/slices/pizzasSlice';

const Home = () => {
    const navigate = useNavigate();
    // const [items, setItems] = useState([]);
    const { items, status } = useSelector(selectPizzaData); // –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux
    // const [isLoading, setIsLoading] = useState(true);

    const isSearch = useRef(false); // —Ñ–ª–∞–≥: –±—ã–ª–∏ –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL (—á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏–π fetch)
    const isMounted = useRef(false); // —Ñ–ª–∞–≥: –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä (—á—Ç–æ–±—ã –Ω–µ –ø—É—à–∏—Ç—å query –≤ URL —Å—Ä–∞–∑—É)

    // const searchValue = useContext(SearchContext); // —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑ App (—á–µ—Ä–µ–∑ Context)
    const { sort, categoryId, currentPage, searchValue } = useSelector(selectFilter); // –¥–∞–Ω–Ω—ã–µ –∏–∑ Redux
    const sortType = sort.sortProperty;

    const dispatch = useDispatch();

    const onChangePage = (number) => {
        dispatch(setCurrentPage(number));
    };

    const OnChangeCategory = (id) => {
        dispatch(setCategoryId(id));
    };

    const getPizzas = async () => {
        // setIsLoading(true); // –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫–µ–ª–µ—Ç–æ–Ω—ã
        const order = sortType.includes('-') ? 'asc' : 'desc';
        const sortBy = sortType.replace('-', '');
        const category = categoryId > 0 ? `category=${categoryId}` : '';
        const search = searchValue ? `&search=${searchValue}` : '';

        // await axios
        //     .get(
        //         `https://682e1ef0746f8ca4a47bf828.mockapi.io/items?page=${currentPage}&limit=4&${category}&sortBy=${sortBy}&order=${order}${search}`,
        //     )
        //     .then((res) => {
        //         if (res.status < 200 || res.status >= 300) {
        //             throw new Error(`HTTP error! status: ${res.status}`);
        //         }
        //         return setItems(res.data); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Ü—Ü—ã
        //     })
        //     .catch((error) => {
        //         if (error.response) {
        //             console.error('Server error:', error.response.status);
        //         } else {
        //             console.error('Request error:', error.message);
        //         }
        //     })
        //     .finally(() => {
        //         setIsLoading(false); // —Å–∫—Ä—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã
        //     });

        // try {

        // } catch (error) {
        //     console.log('Error', error);
        // } finally {
        //     // setIsLoading(false); // —Å–∫—Ä—ã–≤–∞–µ–º —Å–∫–µ–ª–µ—Ç–æ–Ω—ã
        // }

        dispatch(
            fetchPizzas({
                order,
                sortBy,
                category,
                search,
                currentPage,
            }),
        ); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Ü—Ü—ã
    };

    // üîπ 1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ ‚Äî –µ—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL, –ø–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redux
    useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1));
            const sortObj = sortList.find((obj) => obj.sortProperty === params.sortProperty);

            dispatch(
                setFilters({
                    currentPage: Number(params.currentPage),
                    categoryId: Number(params.categoryId),
                    sort: sortObj, // –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî undefined
                }),
            );
            isSearch.current = true; // –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ñ—Ñ–µ–∫—Ç–µ –Ω–µ –¥–µ–ª–∞—Ç—å fetch
        }
    }, []);

    // üîπ 2. –ö–æ–≥–¥–∞ –º–µ–Ω—è—é—Ç—Å—è —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ ‚Äî –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    useEffect(() => {
        window.scrollTo(0, 0); // –ø—Ä–∏ –ª—é–±–æ–º —Ñ–∏–ª—å—Ç—Ä–µ —Å–∫—Ä–æ–ª–ª–∏–º –≤–≤–µ—Ä—Ö

        if (isSearch.current) {
            getPizzas(); // –µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –¥–µ–ª–∞–µ–º fetch –æ–¥–∏–Ω —Ä–∞–∑
            isSearch.current = false; // –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        } else {
            getPizzas(); // –æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π ‚Äî –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞, —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —Å—Ç—Ä–æ–∫–∏ –ø–æ–∏—Å–∫–∞
        }
    }, [categoryId, sort.sortProperty, searchValue, currentPage]);

    // üîπ 3. –ö–æ–≥–¥–∞ –º–µ–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º URL
    useEffect(() => {
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sort.sortProperty,
                categoryId,
                currentPage,
            });
            navigate(`?${queryString}`); // –ø—É—à–∏–º –≤ URL
        }
        isMounted.current = true; // –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ—à—ë–ª ‚Äî —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—É—à–∏—Ç—å
    }, [categoryId, sortType, currentPage]);

    const pizzas = items.map((obj) => <PizzaBlock key={obj.id} {...obj} />);

    //  const pizzas = items.filter(obj => {
    //     if(obj.title.toLowerCase().includes(searchValue.toLowerCase())) {
    //         return true
    //     }
    //     return false
    // }).map((obj) => <PizzaBlock key={obj.id} {...obj} />);
    const skeletons = [...new Array(6)].map((_, i) => <Skeleton key={i}></Skeleton>);
    return (
        <div className="container">
            <div className="content__top">
                {/* setCategoryId */}
                <Categories value={categoryId} onClickCategory={(i) => OnChangeCategory(i)} />
                <Sort />
                {/* <Sort value={sortType} onChangeSort={(i) => setSortType(i)} /> */}
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {status === 'error' ? (
                <div className="content__error-info">
                    <br />
                    <h2>–û—à–∏–±–∫–∞</h2>
                    <br />
                    <br />
                </div>
            ) : (
                <div className="content__items">{status === 'loading' ? skeletons : pizzas}</div>
            )}

            <Pagination currentPage={currentPage} onChangePage={onChangePage}></Pagination>
        </div>
    );
};
// <PizzaBlock key={obj} title={obj.title} price={obj.price} sizes={obj.sizes} types={obj.types}/>

export default Home;
